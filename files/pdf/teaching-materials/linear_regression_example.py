# -*- coding: utf-8 -*-
"""Linear Regression example

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jcybKnGok5qeYlrJvtsBToHycETv8Hgj
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd

# Load the diabetes dataset
diabetes = datasets.load_diabetes()

# Use only one feature
diabetes_X = diabetes.data[:, np.newaxis, 4] # use just 1 out of 10 features

# Split the data into training/testing sets
diabetes_X_train = diabetes_X[:-20] # all but last 20 examples used for training
diabetes_X_test = diabetes_X[-20:] # last 20 examples are used for testing

# Split the targets into training/testing sets
diabetes_y_train = diabetes.target[:-20] # all but last 20 labels used for training
diabetes_y_test = diabetes.target[-20:] # last 20 labels are used for test

print(pd.DataFrame(diabetes.data)) # printing featrues
print(diabetes.target) # and respective targets

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

# Make predictions using the testing set
diabetes_y_pred = regr.predict(diabetes_X_test)

# The coefficients
print('Coefficients: \n', regr.coef_)
# The mean squared error
print("Mean squared error: %.2f"
#       % mean_squared_error(diabetes_y_test, diabetes_y_pred))
# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % r2_score(diabetes_y_test, diabetes_y_pred))

# Plot outputs
plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')
plt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3)

plt.xticks(())
plt.yticks(())

plt.show()